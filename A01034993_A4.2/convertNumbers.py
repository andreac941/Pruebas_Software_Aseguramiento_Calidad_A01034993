# -*- coding: utf-8 -*-
"""convertNumbers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ItXF2kdIC4aVyFdkRvzJUc0oDf0YdjaG
"""

import time
import sys

def dec_to_binary(num, width=10):
    """
    Convert a decimal number to binary representation.

    Args:
        num (int): The decimal number to be converted.
        width (int): The desired width of the binary representation.

    Returns:
        str: The binary representation of the input decimal number.
    """
    if num < 0:
        num = 2**32 + num  # Convert to 32-bit two's complement representation

        binary_result = ""
        while num > 0:
            remainder = num % 2
            binary_result = str(remainder) + binary_result
            num = num // 2

        return binary_result[-width:]

    return bin(num)[2:]

def dec_to_hexadecimal(num, width=10):
    """
    Convert a decimal number to hexadecimal representation.

    Args:
        num (int): The decimal number to be converted.
        width (int): The desired width of the hexadecimal representation.

    Returns:
        str: The hexadecimal representation of the input decimal number.
    """
    if num < 0:
        num = 2**32 + num  # Convert to 32-bit two's complement representation

        hex_chars = "0123456789ABCDEF"
        hex_result = ""
        while num > 0:
            remainder = num % 16
            hex_result = hex_chars[remainder] + hex_result
            num = num // 16

        return 'F' * (width - len(hex_result)) + hex_result[-width:]

    return hex(num)[2:].upper()

def convert_numbers(file_path):
    """
    Convert decimal numbers from a file to binary and hexadecimal representations.

    Args:
        file_path (str): The path to the file containing decimal numbers.

    Raises:
        FileNotFoundError: If the specified file is not found.
    """
    try:
        start_time = time.time()

        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            numbers = content.split()

            binary_results = []
            hex_results = []

            # Print the headers to console
            print("Index\tInput\t\tBinary\t\tHexadecimal")
            print("-----\t-----\t\t------\t\t------------")

            for idx, number in enumerate(numbers, start=1):
                try:
                    num = int(number)

                    binary = dec_to_binary(num)
                    hexadecimal = dec_to_hexadecimal(num)

                    binary_results.append(binary)
                    hex_results.append(hexadecimal)

                    # Print results to console
                    print(f"{idx}\t{num}\t\t{binary}\t\t{hexadecimal}")
                except ValueError:
                    print(f"{idx}\tInvalid data: {number}. Skipping.")

        end_time = time.time()
        elapsed_time = end_time - start_time

        # Write results to file and print time elapsed to console
        write_to_file(binary_results, hex_results, elapsed_time)

    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def write_to_file(binary_results, hex_results, elapsed_time):
    """
    Write binary and hexadecimal results to a file and print time elapsed.

    Args:
        binary_results (list): List of binary representations.
        hex_results (list): List of hexadecimal representations.
        elapsed_time (float): Time elapsed for the execution.
    """
    with open('ConversionResults.txt', 'w', encoding='utf-8') as result_file:
        result_file.write("Index\tInput\t\tBinary\t\tHexadecimal\n")
        result_file.write("-----\t-----\t\t------\t\t------------\n")
        for idx, (binary, hexa) in enumerate(zip(binary_results, hex_results), start=1):
            result_file.write(f"{idx}\t\t{int(binary, 2)}\t\t{binary}\t\t{hexa}\n")

        result_file.write(f"\nTime elapsed: {elapsed_time:.6f} seconds")

        # Print time elapsed to console
        print(f"\nTime elapsed: {elapsed_time:.6f} seconds")

# To allow running from command prompt
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python convertNumbers.py fileWithData.txt")
        sys.exit(1)

    input_file_path = sys.argv[1]

    # Run the conversion
    convert_numbers(input_file_path)
