# -*- coding: utf-8 -*-
"""computeStatistics.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1evFCuCJTirrfmS9tqy1Jw3xxaHkldREA
"""

import time
import re
import sys

def contains_valid_data(line):
    """
    Function that validates if the file contains numeric valid data.
    """
    # Check if a line contains valid data (numeric or string)
    for part in line.split():
        try:
            float(part)
        except ValueError:
            return False
    return True

def extract_numbers_from_string(s):
    """
    Function that extracts numbers from strings.
    """
    # Extract numeric parts from a string and return them as a list of strings
    return re.findall(r'-?\d+\.?\d*', s)

def convert_to_float(num_str, line_num):
    """
    Function that converts strings to floats.
    """
    try:
        return float(num_str)
    except ValueError as e:
        print(f"Error in line {line_num}: {e}. Skipping this part of the line: {num_str}")
        return None

def read_file(file_content):
    """
    Function for reading the files corresponding to the input data.
    """
    data = []
    lines = file_content.split('\n')
    for line_num, line in enumerate(lines, start=1):
        if contains_valid_data(line):
            extracted_numbers = extract_numbers_from_string(line)
            for num_str in extracted_numbers:
                num_float = convert_to_float(num_str, line_num)
                if num_float is not None:
                    data.append(num_float)
        else:
            print(f"Error in line {line_num}: Contains non-numeric or invalid data: {line}. Skipping this line")

    if not data:
        print("No valid numeric data found in the file.")

    return data

def calculate_mode(data1):
    """
    Function for calculating arithmetic mode.
    """
    frequency_dict = {}
    for num in data1:
        frequency_dict[num] = frequency_dict.get(num, 0) + 1

    max_frequency = max(frequency_dict.values())
    mode = [key for key, value in frequency_dict.items() if value == max_frequency]

    return mode[0] if mode else None

def calculate_statistics(data2):
    """
    Function for calculating required statistics.
    """
    if data2 is not None:
        start_time = time.time()

        mean_value = sum(data2) / len(data2)
        median_value = sorted(data2)[len(data2) // 2] if len(
		data2) % 2 != 0 else (sorted(data2)[len(data2) // 2 - 1] + sorted(data2)[len(data2) // 2]) / 2
        mode_value = calculate_mode(data2)
        variance_value = (sum((x - mean_value) ** 2 for x in data2) / (len(data2)-1))
        std_deviation_value = (sum((x - mean_value) ** 2 for x in data2) / len(data2)) ** 0.5

        end_time = time.time()
        elapsed_time = end_time - start_time

        return mean_value, median_value, mode_value, variance_value, std_deviation_value, elapsed_time
    else:
        return None

def print_results(mean, median, mode1, variance, std_deviation, elapsed_time1):
    """
    Function for printing expected statistics.
    """
    print(f"Mean: {mean}")
    print(f"Median: {median}")
    print(f"Mode: {mode1}")
    print(f"Variance: {variance}")
    print(f"Standard Deviation: {std_deviation}")
    print(f"Time Elapsed: {elapsed_time1} seconds")

def write_results_to_file(file_path, mean1, median1, mode2, variance1, std_deviation1, elapsed_time2):
    """
    Function to write results to a .txt file.
    """
    with open(file_path, 'w', encoding="utf-8") as result_file:
        result_file.write(f"Mean: {mean1}\n")
        result_file.write(f"Median: {median1}\n")
        result_file.write(f"Mode: {mode2}\n")
        result_file.write(f"Variance: {variance1}\n")
        result_file.write(f"Standard Deviation: {std_deviation1}\n")
        result_file.write(f"Time Elapsed: {elapsed_time2} seconds\n")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python computeStatistics.py TC1.txt")
        sys.exit(1)

    input_file_path = sys.argv[1]

    with open(input_file_path, "r", encoding="utf-8") as file:
        file_content1 = file.read()

    data3 = read_file(file_content1)

    if data3 is not None:
        mean2, median2, mode3, variance2, std_deviation2, elapsed_time3 = calculate_statistics(data3)

        print_results(mean2, median2, mode3, variance2, std_deviation2, elapsed_time3)

        # Write results to a file
        OUTPUT_FILE_PATH = "StatisticsResults.txt"
        write_results_to_file(OUTPUT_FILE_PATH, mean2, median2, mode3, variance2, std_deviation2, elapsed_time3)

        print(f"Results written to {OUTPUT_FILE_PATH}")
    else:
        print("Error: No valid numeric data3 found in the file.")
