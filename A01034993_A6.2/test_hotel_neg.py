# -*- coding: utf-8 -*-
"""test_hotel_neg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E9KQyl4A8RRdvuhk78nnkSfnMB41eZWL
"""

import unittest
from hotel_management import Hotel, Reservation, Customer


class TestHotelNegativeCases(unittest.TestCase):
    def setUp(self):
        self.hotel = Hotel("Test Hotel", "Test Location", 1)
        self.customer = Customer("John Doe", "john@example.com", "123456789")
        self.reservation = self.hotel.create_reservation(self.customer, room_number=1, start_date="2024-02-20", end_date="2024-02-25")

    def test_create_reservation_invalid_room_number(self):
        # Try to create a reservation with an invalid room number
        with self.assertRaises(ValueError):
            self.hotel.create_reservation(self.customer, room_number=2, start_date="2024-02-20", end_date="2024-02-25")

    def test_create_reservation_invalid_start_date(self):
        # Try to create a reservation with an invalid start date
        with self.assertRaises(ValueError):
            self.hotel.create_reservation(self.customer, room_number=1, start_date="2023-02-20", end_date="2024-02-25")

    def test_create_reservation_invalid_end_date(self):
        # Try to create a reservation with an invalid end date
        with self.assertRaises(ValueError):
            self.hotel.create_reservation(self.customer, room_number=1, start_date="2024-02-20", end_date="2024-01-25")

    def test_create_reservation_no_available_rooms(self):
        # Try to create a reservation when there are no available rooms
        hotel = Hotel("Test Hotel", "Test Location", 0)
        with self.assertRaises(ValueError):
            hotel.create_reservation(self.customer, room_number=1, start_date="2024-02-20", end_date="2024-02-25")

    def test_cancel_reservation_reservation_not_exists(self):
        # Try to cancel a reservation that does not exist
        reservation = Reservation(self.customer, self.hotel, room_number=2, start_date="2024-02-20", end_date="2024-02-25")
        self.assertFalse(self.hotel.cancel_reservation(reservation))

    def test_cancel_reservation_already_canceled(self):
        # Try to cancel a reservation that has already been canceled
        self.reservation.cancel_reservation()
        self.assertFalse(self.reservation.cancel_reservation())

    def test_reserve_room_already_reserved(self):
        # Try to reserve a room that is already reserved for the given period
        with self.assertRaises(ValueError):
            self.hotel.reserve_room(self.customer, room_number=1, start_date="2024-02-20", end_date="2024-02-25")

    def test_reserve_room_invalid_start_date(self):
        # Try to reserve a room with an invalid start date
        with self.assertRaises(ValueError):
            self.hotel.reserve_room(self.customer, room_number=1, start_date="2023-02-20", end_date="2024-02-25")

    def test_reserve_room_invalid_end_date(self):
        # Try to reserve a room with an invalid end date
        with self.assertRaises(ValueError):
            self.hotel.reserve_room(self.customer, room_number=1, start_date="2024-02-20", end_date="2024-01-25")

    def test_reserve_room_no_available_rooms(self):
        # Try to reserve a room when there are no available rooms
        hotel = Hotel("Test Hotel", "Test Location", 0)
        with self.assertRaises(ValueError):
            hotel.reserve_room(self.customer, room_number=1, start_date="2024-02-20", end_date="2024-02-25")

    def test_cancel_room_reservation_reservation_not_exists(self):
        # Try to cancel a room reservation that does not exist
        reservation = Reservation(self.customer, self.hotel, room_number=2, start_date="2024-02-20", end_date="2024-02-25")
        self.assertFalse(self.hotel.cancel_room_reservation(reservation))

    def test_cancel_room_reservation_room_not_reserved(self):
        # Try to cancel a room reservation for a room that has not been reserved
        reservation = Reservation(self.customer, self.hotel, room_number=1, start_date="2024-02-20", end_date="2024-02-25")
        self.assertTrue(self.hotel.cancel_reservation(reservation))
        self.assertFalse(self.hotel.cancel_room_reservation(reservation))


if __name__ == '__main__':
    unittest.main()