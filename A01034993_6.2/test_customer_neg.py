# -*- coding: utf-8 -*-
"""test_customer_neg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E9KQyl4A8RRdvuhk78nnkSfnMB41eZWL
"""

import unittest
from hotel_management import Hotel, Reservation, Customer


class TestCustomerNegativeCases(unittest.TestCase):
    def test_create_customer_invalid_email(self):
        # Try to create a customer with an invalid email format
        with self.assertRaises(ValueError):
            Customer.create_customer(name="John Doe", email="invalid_email", phone="123456789")

    def test_create_customer_missing_information(self):
        # Try to create a customer with missing information
        with self.assertRaises(ValueError):
            Customer.create_customer(name=None, email="john@example.com", phone="123456789")

    def test_delete_customer_not_exist(self):
        # Try to delete a customer that does not exist
        customer = Customer("John Doe", "john@example.com", "123456789")
        Customer.all_customers.remove(customer)  # Remove the customer to simulate non-existence
        with self.assertRaises(ValueError):
            customer.delete_customer()

    def test_modify_information_invalid_email(self):
        # Try to modify customer information with an invalid email format
        customer = Customer("John Doe", "john@example.com", "123456789")
        with self.assertRaises(ValueError):
            customer.modify_information(email="invalid_email")

    def test_modify_information_customer_not_exist(self):
        # Try to modify customer information for a customer that does not exist
        customer = Customer("John Doe", "john@example.com", "123456789")
        Customer.all_customers.remove(customer)  # Remove the customer to simulate non-existence
        with self.assertRaises(ValueError):
            customer.modify_information(name="Jane Doe")


if __name__ == '__main__':
    unittest.main()